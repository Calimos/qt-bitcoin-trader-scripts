[JLScript]
Version=1
Name=Trader
Notes=
Encrypted=false
LogRowsCount=1000
Data="/*\n+ better debugging with new function an optional output to window or file\n+ distributed bids\n+ beautified code\n+ optimized api requests\n+ primary and secondary currency as variable\n+ new varibles in settings firstBidPrice, allBidPrice ...\n- check if all api requests are optimized and changed to variable\n- set variable path to current directory in variables will be in one file\n+ currencyPrimaryKeepAmountFixedValue && currencySecondaryKeepAmountFixedValue\n- make bids if there are no open bids and last bid was executed\n- if more bids are executed in a row, then ask will be at last bid price. How to solve this?\n+ new variable - lastTradeStatus - solves trouble when ther are multiple sells in a row\n+ minAskValue & maxAskValue\n+ added LastMySellPrice change check\n\n*/\nvar variablePath = \"D:\\\\Damjan\\\\Qsync\\\\Bitcoin\\\\QT Bitcoin Trader\\\\QTBitcointTrader\\\\\";\n\n///////////////                  log to file or window                     ///////////////////\nvar logToFile = true;\nvar logToWindow = true;\nvar logFile = variablePath + \"TraderLogger.txt\";\n\nfunction eventLogger(tempString) {\n    if (logToFile)\n        trader.fileAppend(logFile, trader.dateTimeString() + \": \" + tempString);\n    if (logToWindow)\n        trader.log(tempString);\n}\n///////////////////////////////////////////////////////////////////\n\nfunction logger() {\n    trader.fileAppend(fileLoggerFile, fileLogger + \" - \" + trader.dateTimeString());\n}\n\neventLogger(\"///////////////////////        START - TRADER       ///////////////////\");\n\n////////// SCRIPT 2 /////////////////////////////////////////////\nvar vverh = 0.7; // in%, for example, if there is 2%, and at the time running a script purchase price will be 100 BTC, then the purchase price 102 restarts the entire cycle //default 0.4\n//var orderss = 8; // value in the script 1 \n// Below if you do not Charite do not change anything. \nvar rest = 100000000000;\nvar lastCurrencyPrimaryBallanceFile = variablePath + \"lastCurrencyPrimaryBallance.txt\";\nvar firstBuyChecked = false;\n\nvar lastMyBuyPriceOriginalFile = variablePath + \"lastMyBuyPrice.txt\";\nvar lastMyBuyPriceOriginal = parseFloat(trader.fileReadAll(lastMyBuyPriceOriginalFile));\n\nvar currencyPrimary = \"USD\";\nvar currencySecondary = \"ETH\";\nvar lastTradeStatus = \"\";\nvar lastTradeStatusFile = variablePath + \"lastTradeStatusFile.txt\";\nvar temp = trader.fileReadAll(lastTradeStatusFile).toString().trim();\neventLogger(\"temp: \" + temp);\nif (temp.length > 0)\n    lastTradeStatus = temp;\nelse\n    lastTradeStatus = \"BUY\";\neventLogger(\"lastTradeStatus: \" + lastTradeStatus);\n\n/////////////////////////////////////////////////////////////////\n////////// SCRIPT 1 /////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////\n// in%,the first step indentation How price first buy order in the table should be less than the purchase of the current at the time of the calculation table.  All other orders will buy more cheaper //default 0.5\nvar otstupFile = variablePath + \"firstBuyStep.txt\";\nvar otstup = parseFloat(trader.fileReadAll(otstupFile));\nvar otstupOriginal = otstup;\n///////////////////////////////////////////////////////////////////\n// in%,the first step indentation How price first buy order in the table should be less than the purchase of the current at the time of the calculation table.  All other orders will buy more cheaper //default 0.5\nvar raznostInPercentageFile = variablePath + \"raznostInPercentage.txt\";\nvar raznostInPercentage = parseFloat(trader.fileReadAll(raznostInPercentageFile));\n\nvar raznostInPercentageConditionFile = variablePath + \"raznostInPercentageCondition.txt\";\nvar raznostInPercentageCondition = trader.fileReadAll(raznostInPercentageConditionFile).toString().trim();\n///////////////////////////////////////////////////////////////////\n//maxNumberOfBids.txt\nvar ordersFile = variablePath + \"maxNumberOfBids.txt\";\nvar orders = parseFloat(trader.fileReadAll(ordersFile)); // 2 to 20,how many buy-to place orders in the amount of overlap. //default 13\nvar ordersOriginalValue = orders;\n///////////////////////////////////////////////////////////////////\n//stepBetweenOrders.txt\nvar stepBetweenOrdersFile = variablePath + \"stepBetweenOrders.txt\";\nvar stepBetweenOrders = parseFloat(trader.fileReadAll(stepBetweenOrdersFile)); // in% overlap stroke rates,calculating the depth of the table buy orders.  For example,in a first step,the price 10BTC percentage of overlap of 20% means that the table will be set in the range // 8-10BTC.  //default 30\n///////////////////////////////////////////////////////////////////\n//profit.txt\nvar profitFile = variablePath + \"profit.txt\";\nvar profit = parseFloat(trader.fileReadAll(profitFile)); // in%,profit,profit How to lay into each sell order. \n///////////////////////////////////////////////////////////////////\n//martinStep.txt\nvar martinFile = variablePath + \"martinStep.txt\";\nvar martin = parseFloat(trader.fileReadAll(martinFile)); // in%,martingale,when calculating each table buy orders following order cheaper by volume greater than the previous to this value.  //default 15\n///////////////////////////////////////////////////////////////////\nvar lastCurrencySecondaryBallanceFile = variablePath + \"lastCurrencySecondaryBallance.txt\";\nvar lastCurrencySecondaryBallance = 0;\n\n///////////////////////////////////////////////////////////////////\nvar profitCurrencyPrimaryAmount = variablePath + \"profitCurrencyPrimaryAmount.txt\";\nvar profitCurrencyPrimaryAmount = parseFloat(trader.fileReadAll(profitCurrencyPrimaryAmount));\n///////////////////////////////////////////////////////////////////\nvar profitInPercentageFile = variablePath + \"profitInPercentage.txt\";\nvar profitInPercentage = parseFloat(trader.fileReadAll(profitInPercentageFile));\n///////////////////////////////////////////////////////////////////\nvar profitCurrencyPrimaryAmountCondition = variablePath + \"profitCurrencyPrimaryAmountCondition.txt\";\nvar profitCurrencyPrimaryAmountCondition = trader.fileReadAll(profitCurrencyPrimaryAmountCondition).toString().trim();\n///////////////////////////////////////////////////////////////////\nvar feeTakerFile = variablePath + \"feeTaker.txt\";\nvar feeTaker = parseFloat(trader.fileReadAll(feeTakerFile));\n///////////////////////////////////////////////////////////////////\nvar feeMakerFile = variablePath + \"feeMaker.txt\";\nvar feeMaker = parseFloat(trader.fileReadAll(feeMakerFile));\n///////////////////////////////////////////////////////////////////              \n\nvar bidPriceFile = variablePath + \"bidPrice.txt\";\nvar bidPrice = trader.get(\"BidPrice\");\ntrader.fileWrite(bidPriceFile, bidPrice);\n///////////////////////////////////////////////////////////////////\nvar resetPriceFile = variablePath + \"resetPrice.txt\";\nvar resetPrice = parseFloat(trader.fileReadAll(resetPriceFile));\n///////////////////////////////////////////////////////////////////\nvar resetBidsEnabledFile = variablePath + \"resetBidsEnabled.txt\";\nvar resetBidsEnabled = trader.fileReadAll(resetBidsEnabledFile).toString().trim();\n///////////////////////////////////////////////////////////////////\nvar fileLoggerFile = variablePath + \"fileLoggerTrader.txt\";\n///////////////////////////////////////////////////////////////////\nvar firstBidPriceFile = variablePath + \"firstBidPrice.txt\";\nvar firstBidPrice = parseFloat(trader.fileReadAll(firstBidPriceFile));\n///////////////////////////////////////////////////////////////////\nvar firstBidPriceEnabledFile = variablePath + \"firstBidPriceEnabled.txt\";\nvar firstBidPriceEnabled = trader.fileReadAll(firstBidPriceEnabledFile).toString().trim();\n///////////////////////////////////////////////////////////////////\nvar allBidsPriceFile = variablePath + \"allBidsPrice.txt\";\nvar allBidsPrice = parseFloat(trader.fileReadAll(allBidsPriceFile));\n///////////////////////////////////////////////////////////////////\nvar allBidsPriceEnabledFile = variablePath + \"allBidsPriceEnabled.txt\";\nvar allBidsPriceEnabled = trader.fileReadAll(allBidsPriceEnabledFile).toString().trim();\n///////////////////////////////////////////////////////////////////\nvar currencyPrimaryKeepAmountFixedValue = 0.0;\nvar currencySecondaryKeepAmountFixedValue = 0;\n\n\n///////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////\n//////                   BIDS DISTRIBUTION /////////////////////////////////////\n///////////////////////////////////////////////////////////////////              \n///////////////////////////////////////////////////////////////////\n// file location\nvar bidsDistributionEnabledFile = variablePath + \"bidsDistributionEnabled.txt\";\n// value - true or false\nvar bidsDistributionEnabled = trader.fileReadAll(bidsDistributionEnabledFile).toString().trim();\n\n// file location\nvar bidsDistributionMinExchangeBidFile = variablePath + \"bidsDistributionMinExchangeBid.txt\";\n// value - true or false\nvar bidsDistributionMinExchangeBid = parseFloat(trader.fileReadAll(bidsDistributionMinExchangeBidFile));\n\n\n// file location\nvar bidsDistributionMaxNumberOfBidsFile = variablePath + \"bidsDistributionMaxNumberOfBids.txt\";\n// value - true or false\nvar bidsDistributionMaxNumberOfBids = trader.fileReadAll(bidsDistributionMaxNumberOfBidsFile);\n\n\n\n// file location\nvar bidsDistributionMaxVolumeSecondCurrencyFile = variablePath + \"bidsDistributionMaxVolumeSecondCurrency.txt\";\n// value - true or false\nvar bidsDistributionMaxVolumeSecondCurrency = trader.fileReadAll(bidsDistributionMaxVolumeSecondCurrencyFile);\n\nvar sumAskIdNumbers = 0;\n///////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////\n\n\n\nvar depo = 98; // in%,from 1 to 98,use of the depot,which part of the BTC(or the second currency in the pair) put into circulation \nvar komissiya = 0;\nvar prceni = 0;\nvar pric = 0;\nvar price = 0;\nvar pricet = 0;\nvar raznost = 0;\nvar pperv = 0;\nvar pvtorvraz = 0;\n\n/////////////////////////////////\nvar myVolumes = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\nvar myPrices = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\nvar openBids = 0;\nvar openAsks = 0\nvar primaryCurrencyValueOld = 0;\n\nvar justStarted = true;\nvar minValueAfterLastRestart = 100000000000;\n\n//setNewRestartValue();\nmakeAsk();\n/////////////////////////////////////////////////////////////////\n////////// SCRIPT 2 /////////////////////////////////////////////\nscript2();\n\nfunction script2() {\n    var scriptName = \"script2()\";\n    eventLogger(scriptName + \".START\");\n    justStarted = true;\n    primaryCurrencyValueOld = 0;\n    script1();\n    //sledcikl();\n    trader.timer(90, \"restartScript()\");\n    trader.timer(150, \"checkIfFirstBuyWasExecuted()\");\n\n    eventLogger(scriptName + \".END\");\n\n}\n\n\n\n\nfunction changeNrOfOrders() {\n    var scriptName = \"changeNrOfOrders()\";\n    eventLogger(scriptName + \".START\");\n    eventLogger(scriptName + \".orders: \" + orders);\n\n    var primaryCurrencyValue = 0;\n    primaryCurrencyValueOld = trader.fileReadAll(lastCurrencyPrimaryBallanceFile);\n    var currencyPrimaryBalance = trader.get(\"Balance\", currencyPrimary);\n    primaryCurrencyValue = currencyPrimaryBalance;\n    eventLogger(scriptName + \".primaryCurrencyValue: \" + primaryCurrencyValue);\n    eventLogger(scriptName + \".primaryCurrencyValueOld: \" + primaryCurrencyValueOld);\n\n    if (primaryCurrencyValueOld != primaryCurrencyValue && justStarted == false) {\n        eventLogger(scriptName + \".STEP1: \");\n        primaryCurrencyValue = currencyPrimaryBalance;\n\n        if (primaryCurrencyValueOld < primaryCurrencyValue) {\n            eventLogger(scriptName + \".STEP2\");\n            orders++;\n        } else {\n            eventLogger(scriptName + \".STEP3\");\n            orders--;\n        }\n    } else\n        eventLogger(scriptName + \".STEP4\");\n\n    primaryCurrencyValueOld = primaryCurrencyValue;\n\n    eventLogger(scriptName + \".primaryCurrencyValue: \" + primaryCurrencyValue);\n    eventLogger(scriptName + \".currencyPrimaryBalance: \" + currencyPrimaryBalance);\n    eventLogger(scriptName + \".orders: \" + orders);\n    eventLogger(scriptName + \".END\");\n}\n\nfunction sledcikl() {\n    var scriptName = \"sledcikl()\";\n    eventLogger(scriptName + \".START\");\n    //rest = vverh / 100 + 1;\n    //rest = bidPrice * (1+(profit/100));\n    eventLogger(scriptName + \".rest: \" + rest);\n    eventLogger(scriptName + \".START\");\n}\n\nfunction checkIfFirstBuyWasExecuted() {\n    var scriptName = \"checkIfFirstBuyWasExecuted()\";\n    eventLogger(scriptName + \".START\");\n\n    openBids = trader.get(\"OpenBidsCount\");\n    //var lastMyBuyPrice = trader.get(\"LastMyBuyPrice\");\n    var lastMyBuyPrice = parseFloat(trader.fileReadAll(lastMyBuyPriceOriginalFile));\n\n    eventLogger(scriptName + \".ordersOriginalValue: \" + ordersOriginalValue);\n    eventLogger(scriptName + \".openBids: \" + openBids);\n    eventLogger(scriptName + \".otstupOriginal: \" + otstupOriginal);\n    eventLogger(scriptName + \".firstBuyChecked: \" + firstBuyChecked);\n    eventLogger(scriptName + \".lastMyBuyPriceOriginal: \" + lastMyBuyPriceOriginal);\n    eventLogger(scriptName + \".lastMyBuyPrice: \" + lastMyBuyPrice);\n\n    //if (((ordersOriginalValue == openBids || openBids == 0) || (firstBuyChecked == false && ordersOriginalValue != openBids && lastMyBuyPriceOriginal == lastMyBuyPrice)) && otstupOriginal == 0) {\n    if ((ordersOriginalValue == openBids || openBids == 0) && otstupOriginal == 0) {\n        eventLogger(scriptName + \".Restart TraderMainRestart\");\n        trader.cancelBids(currencySecondary + currencyPrimary);\n        trader.groupStop(\"TraderMainRestart\");\n        trader.groupStart(\"TraderMainRestart\");\n    }\n    firstBuyChecked = true;\n    eventLogger(scriptName + \".END\");\n\n}\n\nfunction setNewRestartValue() {\n    var scriptName = \"setNewRestartValue()\";\n    eventLogger(scriptName + \".START\");\n\n    var bidPriceTemp = trader.get(\"BidPrice\");\n    eventLogger(scriptName + \".bidPriceTemp: \" + bidPriceTemp);\n    eventLogger(scriptName + \".minValueAfterLastRestart: \" + minValueAfterLastRestart);\n\n    //set new minValueAfterLastRestart\n    if (bidPriceTemp < minValueAfterLastRestart) {\n        eventLogger(scriptName + \".STEP1\");\n        minValueAfterLastRestart = bidPriceTemp;\n\n        /*\n        if (profitCurrencyPrimaryAmountCondition == \"true\") {\n            eventLogger(scriptName + \".STEP2\");\n            rest = bidPriceTemp + (profitCurrencyPrimaryAmount * resetPrice);\n        }\n        */\n        /* else {\n            eventLogger(scriptName + \".STEP3\");\n            //rest = bidPriceTemp + ((bidPriceTemp / 100 * profitInPercentage) * resetPrice);\n            //TODO - calculate exact reset value\n            rest = bidPriceTemp + (bidPriceTemp * (resetPrice * 2/ 1000));\n        }\n        */\n    }\n    eventLogger(scriptName + \".rest: \" + rest);\n    eventLogger(scriptName + \".END\");\n}\n\n\nfunction strcmp(a, b) {\n    var scriptName = \"strcmp()\";\n    eventLogger(scriptName + \".START\");\n\n    eventLogger(scriptName + \".a: \" + a);\n    eventLogger(scriptName + \".b: \" + b);\n\n    if (a.toString() < b.toString()) {\n        eventLogger(scriptName + \".STEP1\");\n        return -1;\n    }\n    if (a.toString() > b.toString()) {\n        eventLogger(scriptName + \".STEP2\");\n        return 1;\n    }\n    eventLogger(scriptName + \".STEP3\");\n    eventLogger(scriptName + \".END\");\n    return 0;\n}\n\nfunction restartScript() {\n    var scriptName = \"restartScript()\";\n    eventLogger(scriptName + \".START\");\n\n    //if (strcmp(resetBidsEnabled, \"true\") == 0) {\n    //if (strcmp(resetBidsEnabled.trim(), \"true\") == 0) {\n    eventLogger(scriptName + \".resetBidsEnabled: \" + resetBidsEnabled);\n    if (resetBidsEnabled == \"true\") // || (canMakeBid() && trader.get(\"OpenBidsCount\") == 0)) \n    {\n        eventLogger(scriptName + \".STEP1\");\n        //setNewRestartValue();\n\n        bidPrice = parseFloat(trader.fileReadAll(bidPriceFile));\n        eventLogger(scriptName + \".bidPrice: \" + bidPrice);\n        eventLogger(scriptName + \".rest: \" + rest);\n        //reset bids in resetPrice condition is reached\n        if (bidPrice >= rest) //  || (canMakeBid() && trader.get(\"OpenBidsCount\") == 0)) \n        {\n            eventLogger(scriptName + \".STEP2\");\n\n            var openAsksCount = trader.get(\"OpenAsksCount\");\n            var openBidsCount = trader.get(\"OpenBidsCount\");\n\n            eventLogger(scriptName + \".openAsksCount: \" + openAsksCount);\n            eventLogger(scriptName + \".openBidsCount: \" + openBidsCount);\n            eventLogger(scriptName + \".orders: \" + orders);\n\n            lastTradeStatus = \"SELL\";\n            eventLogger(scriptName + \".SELL\");\n            eventLogger(scriptName + \".Restart Trader\");\n            trader.groupStop(\"TraderMainRestart\");\n            trader.groupStart(\"TraderMainRestart\");\n            \n            //trader.groupStop(\"Trader\");\n            //trader.groupStart(\"Trader\");\n\n\n            script1();\n            //sledcikl();\n            //    }\n            //}\n        }\n    }\n    eventLogger(scriptName + \".STEP3\");\n    eventLogger(scriptName + \".END\");\n}\n\n/////////////////////////////////////////////////////////////////\n////////// SCRIPT 1 /////////////////////////////////////////////\n\nfunction script1() {\n    var scriptName = \"script1()\";\n    eventLogger(scriptName + \".START\");\n    // VERZIJA 2\n    bidPrice = parseFloat(trader.fileReadAll(bidPriceFile));\n    bal = trader.get(\"Balance\", currencyPrimary);\n    eventLogger(scriptName + \".bal: \" + bal);\n    komissiya = trader.get(\"Fee\");\n    eventLogger(scriptName + \".komissiya: \" + komissiya);\n    otstup = otstup / 100;\n    otstup = 1 - otstup;\n    eventLogger(scriptName + \".otstup: \" + otstup);\n    depo = depo / 100;\n    eventLogger(scriptName + \".depo: \" + depo);\n    martin = martin / 100 + 1;\n    eventLogger(scriptName + \".martin: \" + martin);\n    komissiya = komissiya * 2;\n    komissiya = komissiya / 100 + 1;\n    eventLogger(scriptName + \".komissiya: \" + komissiya);\n    stepBetweenOrders = stepBetweenOrders + otstup;\n    eventLogger(scriptName + \".stepBetweenOrders: \" + stepBetweenOrders);\n    profit = profit / 100 + 1;\n    eventLogger(scriptName + \".profit: \" + profit);\n    prceni = stepBetweenOrders / orders;\n    eventLogger(scriptName + \".prceni: \" + prceni);\n    prceni = 1 - (prceni / 100);\n    eventLogger(scriptName + \".prceni: \" + prceni);\n    // Pervaluteif = 100000 \n    //trader.cancelOrders(currencySecondary + currencyPrimary);\n    trader.cancelBids(currencySecondary + currencyPrimary);\n    pric = bidPrice * otstup;\n    eventLogger(scriptName + \".bidPrice: \" + bidPrice);\n    eventLogger(scriptName + \".pric: \" + pric);\n    price = pric;\n    pricet = pric * prceni;\n    eventLogger(scriptName + \".pricet: \" + pricet);\n    var lastPrice = trader.get(\"LastPrice\");\n    if (raznostInPercentageCondition == \"true\") {\n        eventLogger(scriptName + \".STEP1\");\n        raznost = lastPrice * (raznostInPercentage / 100);\n    } else {\n        eventLogger(scriptName + \".STEP2\");\n        raznost = pric - pricet;\n    }\n    eventLogger(scriptName + \".raznost: \" + raznost);\n\n    trader.timer(31, \"makeBids()\");\n    trader.timer(8, \"checkIfAskCanBeMade()\");\n    pperv = 0;\n    pvtorvraz = 0;\n    trader.delay(20, \"aaa()\");\n    trader.timer(80, \"restartEverything()\");\n    var currencyPrimaryBalance = trader.get(\"Balance\", currencyPrimary);\n    eventLogger(scriptName + \".currencyPrimaryBalance: \" + currencyPrimaryBalance);\n\n    justStarted = false;\n    //trader.timer(30, \"changeNrOfOrders()\");\n    eventLogger(scriptName + \".END\");\n}\n\nfunction canMakeBid() {\n\n    var scriptName = \"canMakeBid()\";\n    eventLogger(scriptName + \".START\");\n\n    var makeBid = false;\n\n    lastMyBuyPriceOriginal = parseFloat(trader.fileReadAll(lastMyBuyPriceOriginalFile));\n    var lastMyBuyPrice = trader.get(\"LastMyBuyPrice\");\n    var lastMySellPrice = trader.get(\"LastMySellPrice\");\n    var lastMyBuyPriceOriginalDiffRaznost = lastMyBuyPriceOriginal * (stepBetweenOrders / 100) / 10;\n    var lastMyBuyPriceOriginalMinusRaznost = lastMyBuyPriceOriginal - raznost;\n    var lastMySellPricePlusRaznost = lastMySellPrice + raznost;\n\n    eventLogger(scriptName + \".lastMyBuyPrice: \" + lastMyBuyPrice);\n    eventLogger(scriptName + \".lastMyBuyPriceOriginal: \" + lastMyBuyPriceOriginal);\n    eventLogger(scriptName + \".lastMySellPrice: \" + lastMySellPrice);\n    eventLogger(scriptName + \".stepBetweenOrders: \" + stepBetweenOrders);\n    eventLogger(scriptName + \".lastMyBuyPriceOriginalMinusRaznost: \" + lastMyBuyPriceOriginalMinusRaznost);\n    eventLogger(scriptName + \".lastMySellPricePlusRaznost: \" + lastMySellPricePlusRaznost);\n    eventLogger(scriptName + \".raznost: \" + raznost);\n\n    openBidsCount = trader.get(\"OpenBidsCount\");\n\n    //if ((lastMyBuyPrice <= lastMyBuyPriceOriginalMinusRaznost && lastMyBuyPrice <= lastMyBuyPriceOriginal && (openBidsCount == 0))) {\n    if ((lastMyBuyPrice <= lastMyBuyPriceOriginalMinusRaznost && lastMyBuyPrice <= lastMyBuyPriceOriginal)) {\n        eventLogger(scriptName + \".STEP1\");\n        makeBid = true;\n        eventLogger(scriptName + \".makeBid: \" + makeBid);\n        return makeBid;\n    }\n\n\n    //////////////////////////////////////////////////////////////////////\n    var openAsksCount = trader.get(\"OpenAsksCount\");\n    // if there are no open asks\n    if (openAsksCount == 0) {\n        eventLogger(scriptName + \".STEP2\");\n        makeBid = true;\n        eventLogger(scriptName + \".makeBid: \" + makeBid);\n        return makeBid;\n    }\n    //////////////////////////////////////////////////////////////////////\n    var lastPrice = trader.get(\"LastPrice\");\n    var diffLastMySellPriceLastPrice = Math.abs(lastMySellPrice - lastPrice);\n    var diffLastMyBuyPriceLastPrice = Math.abs(lastMyBuyPrice - lastPrice);\n\n\n    eventLogger(scriptName + \".diffLastMySellPriceLastPrice: \" + diffLastMySellPriceLastPrice);\n    eventLogger(scriptName + \".diffLastMyBuyPriceLastPrice: \" + diffLastMyBuyPriceLastPrice);\n    eventLogger(scriptName + \".lastMyBuyPriceOriginalDiffRaznost: \" + lastMyBuyPriceOriginalDiffRaznost);\n    eventLogger(scriptName + \".openBidsCount: \" + openBidsCount);\n\n    var partValueBuy = Math.abs(lastMyBuyPrice - lastPrice) / lastPrice;\n\n    eventLogger(scriptName + \".partValueBuy: \" + partValueBuy);\n\n    if (raznost > diffLastMySellPriceLastPrice && openBidsCount == 0 && diffLastMySellPriceLastPrice < diffLastMyBuyPriceLastPrice) {\n        //if (partValue > raznost && openBidsCount == 0 && diffLastMySellPriceLastPrice < diffLastMyBuyPriceLastPrice) {\n        eventLogger(scriptName + \".STEP3\");\n        eventLogger(scriptName + \".raznost: \" + raznost);\n        makeBid = true;\n        eventLogger(scriptName + \".makeBid: \" + makeBid);\n        return makeBid;\n    }\n\n    //buy if last price is higher then last sell price and there are no open bids\n    if (openBidsCount == 0 && lastPrice >= lastMySellPrice && lastMySellPrice > lastMyBuyPrice) {\n        eventLogger(scriptName + \".STEP4\");\n        makeBid = true;\n        eventLogger(scriptName + \".makeBid: \" + makeBid);\n        return makeBid;\n    }\n\n    if (lastPrice < (lastMyBuyPrice - raznost)) {\n        eventLogger(scriptName + \".STEP5\");\n        makeBid = true;\n        eventLogger(scriptName + \".makeBid: \" + makeBid);\n        return makeBid;\n    }\n    var partValueSell = Math.abs(lastMySellPrice - lastPrice) / lastPrice;\n\n    eventLogger(scriptName + \".partValueSell: \" + partValueSell);\n    eventLogger(scriptName + \".lastPrice - lastMySellPrice: \" + (lastPrice - lastMySellPrice));\n    eventLogger(scriptName + \".lastMyBuyPrice - lastPrice: \" + (lastMyBuyPrice - lastPrice));\n\n    //raznost = lastPrice * (raznostInPercentage / 100);\n\n    if (openBidsCount == 0 && lastPrice < lastMyBuyPrice && (lastMyBuyPrice - lastPrice) > raznost)\n    //if(openBids == 0 && lastMySellPrice > lastPrice && partValueSell > (lastPrice - lastMySellPrice) && lastMyBuyPrice > lastPrice && partValueSell > raznost)\n    {\n        eventLogger(scriptName + \".STEP6\");\n        makeBid = true;\n        eventLogger(scriptName + \".makeBid: \" + makeBid);\n        return makeBid;\n    }\n\n    eventLogger(scriptName + \".lastTradeStatus: \" + lastTradeStatus);\n\n    if (lastTradeStatus == \"SELL\") {\n        eventLogger(scriptName + \".STEP7\");\n        makeBid = true;\n        eventLogger(scriptName + \".makeBid: \" + makeBid);\n        return makeBid;\n    }\n\n    \n    if (openBidsCount == 0) {\n        eventLogger(scriptName + \".STEP8\");\n        makeBid = true;\n        //script1();\n        eventLogger(scriptName + \".makeBid: \" + makeBid);\n        return makeBid;\n    }\n    \n\n    eventLogger(scriptName + \".makeBid: \" + makeBid);\n    eventLogger(scriptName + \".END\");\n    return makeBid;\n}\n\n// sum all id's from 1 to n  -- if n = 5 then sum is equal 1+2+3+4+5 = 15\nfunction getSumAskIdNumbers() {\n    var scriptName = \"getSumAskIdNumbers()\";\n    eventLogger(scriptName + \".START\");\n    var temp = 0;\n    for (var i = 1; i <= bidsDistributionMaxNumberOfBids; i++)\n        temp += i;\n    eventLogger(scriptName + \".START\");\n    return temp;\n}\n\n//if there can be set 10 max number of bids/asks and min first bid is 0.01, then firt bid will be \nfunction getDistributedBid(bidNumber) {\n    var scriptName = \"getDistributedBid()\";\n    eventLogger(scriptName + \".START\");\n    eventLogger(scriptName + \".bidNumber: \" + bidNumber);\n\n    var bidValue = 0;\n    var openAsksNumber = trader.get(\"OpenAsksCount\");\n    eventLogger(scriptName + \".openAsksNumber: \" + openAsksNumber);\n    // bidsDistributionFirstBid\n    // bidsDistributionMaxNumberOfBids\n    // bidsDistributionMaxVolumeSecondCurrency\n\n    if (sumAskIdNumbers == 0) {\n        eventLogger(scriptName + \".STEP1\");\n        sumAskIdNumbers = getSumAskIdNumbers();\n        eventLogger(scriptName + \".sumAskIdNumbers: \" + sumAskIdNumbers);\n    }\n\n    var bidPart = 0;\n    eventLogger(scriptName + \".sumAskIdNumbers: \" + sumAskIdNumbers);\n    eventLogger(scriptName + \".bidsDistributionMaxVolumeSecondCurrency: \" + bidsDistributionMaxVolumeSecondCurrency);\n    eventLogger(scriptName + \".bidsDistributionMaxNumberOfBids: \" + bidsDistributionMaxNumberOfBids);\n    eventLogger(scriptName + \".bidsDistributionMinExchangeBid: \" + bidsDistributionMinExchangeBid);\n\n    if (sumAskIdNumbers > 0 && bidsDistributionMaxVolumeSecondCurrency > 0 && bidsDistributionMaxNumberOfBids > 0) {\n        eventLogger(scriptName + \".STEP2\");\n        bidPart = bidsDistributionMaxVolumeSecondCurrency / sumAskIdNumbers;\n        eventLogger(scriptName + \".bidPart: \" + bidPart);\n        var tempValue1 = (openAsksNumber + bidNumber) * bidPart;\n        var tempValue2 = (openAsksNumber + bidNumber) / sumAskIdNumbers;\n        bidValue = bidsDistributionMinExchangeBid + tempValue1 - tempValue2;\n\n        eventLogger(scriptName + \".tempValue1: \" + tempValue1);\n        eventLogger(scriptName + \".tempValue2: \" + tempValue2);\n        eventLogger(scriptName + \".bidValue: \" + bidValue);\n\n    }\n\n    eventLogger(scriptName + \".END\");\n    return bidValue;\n}\n\nfunction makeBids() {\n    var scriptName = \"makeBids()\";\n    eventLogger(scriptName + \".START\");\n\n    var currencyPrimaryBalance = trader.get(\"Balance\", currencyPrimary);\n\n    eventLogger(scriptName + \".currencyPrimaryKeepAmountFixedValue: \" + currencyPrimaryKeepAmountFixedValue);\n    eventLogger(scriptName + \".currencyPrimaryBalance: \" + currencyPrimaryBalance);\n\n    if (currencyPrimaryBalance >= currencyPrimaryKeepAmountFixedValue) {\n        if (canMakeBid()) {\n            eventLogger(scriptName + \".STEP1\");\n            var openBidsCount = trader.get(\"OpenBidsCount\");\n\n            if (ordersOriginalValue == openBidsCount) {\n                trader.groupStop(\"TraderMainRestart\");\n                trader.groupStart(\"TraderMainRestart\");\n                trader.groupStop(\"Trader\");\n            }\n            //cancel previous bids\n            if (openBidsCount != 0)\n                trader.cancelBids(currencySecondary + currencyPrimary);\n\n\n            var all = currencyPrimaryBalance * depo;\n            eventLogger(scriptName + \".depo: \" + depo);\n            eventLogger(scriptName + \".all: \" + all);\n\n            var yyy = 0;\n            eventLogger(scriptName + \".STEP2\");\n            for (var i = 0; i < orders;) {\n                yyy = yyy + Math.pow(martin, i);\n                eventLogger(scriptName + \".--------------------------------\");\n                eventLogger(scriptName + \".i: \" + i);\n                eventLogger(scriptName + \".martin: \" + martin);\n                eventLogger(scriptName + \".Math.pow(martin, i): \" + Math.pow(martin, i));\n                eventLogger(scriptName + \".yyy: \" + yyy);\n                i = i + 1;\n            }\n\n            eventLogger(scriptName + \".STEP3\");\n            var amount = all / yyy;\n            var firstBidPriceDiff = 0;\n            eventLogger(scriptName + \".amount: \" + amount);\n            eventLogger(scriptName + \".firstBidPriceDiff: \" + firstBidPriceDiff);\n            eventLogger(scriptName + \".orders: \" + orders);\n            eventLogger(scriptName + \".STEP4\");\n\n            for (var i = 0; i < orders;) {\n                eventLogger(scriptName + \".--------------------------------\");\n                eventLogger(scriptName + \".i: \" + i);\n                eventLogger(scriptName + \".allBidsPriceEnabled: \" + allBidsPriceEnabled);\n                eventLogger(scriptName + \".allBidsPrice: \" + allBidsPrice);\n                eventLogger(scriptName + \".amount: \" + amount);\n\n                if (allBidsPriceEnabled == \"true\") {\n                    eventLogger(scriptName + \".STEP5\");\n                    amount = allBidsPrice;\n                } else if (i == 0 && firstBidPriceEnabled == \"true\") {\n                    eventLogger(scriptName + \".STEP6\");\n                    if (firstBidPrice < amount) {\n                        eventLogger(scriptName + \".STEP7\");\n                        firstBidPriceDiff = amount - firstBidPrice;\n                        amount = firstBidPrice;\n                    }\n                }\n\n                if (bidsDistributionEnabled == \"true\") {\n                    eventLogger(scriptName + \".STEP8\");\n                    eventLogger(scriptName + \".i: \" + i);\n                    var bidTemp = getDistributedBid(i);\n                    if (bidTemp != 0) {\n                        eventLogger(scriptName + \".STEP9\");\n                        eventLogger(scriptName + \".bidTemp: \" + bidTemp);\n                        amount = bidTemp;\n\n                    }\n                }\n                eventLogger(scriptName + \".amount: \" + amount);\n                eventLogger(scriptName + \".price: \" + price);\n\n                if ((allBidsPriceEnabled == \"true\") || (i == 1 && firstBidPriceEnabled == \"true\") || (bidsDistributionEnabled == \"true\")) {\n                    eventLogger(scriptName + \".STEP10\");\n                    trader.buy(currencySecondary + currencyPrimary, amount, price);\n                } else {\n                    eventLogger(scriptName + \".STEP11\");\n                    trader.buy(currencySecondary + currencyPrimary, amount / price, price);\n                }\n\n                eventLogger(scriptName + \".STEP12\");\n                //myVolumes[i] = amount;\n                //myPrices[i] = price;\n                price = price - raznost;\n\n                amount = amount * martin;\n                eventLogger(scriptName + \".amount: \" + amount);\n                eventLogger(scriptName + \".price: \" + price);\n\n                i = i + 1;\n            }\n        }\n    }\n    eventLogger(scriptName + \".END\");\n}\n\nfunction checkIfAskCanBeMade() {\n    var scriptName = \"checkIfAskCanBeMade()\";\n    eventLogger(scriptName + \".START\");\n\n    eventLogger(scriptName + \".Read secondary balance\");\n    var currencySecondaryBalance = trader.get(\"Balance\", currencySecondary);\n    eventLogger(scriptName + \".Read last secondary balance from file\");\n    lastCurrencySecondaryBallance = parseFloat(trader.fileReadAll(lastCurrencySecondaryBallanceFile));\n    eventLogger(scriptName + \".currencySecondaryBalance: \" + currencySecondaryBalance);\n    eventLogger(scriptName + \".lastCurrencySecondaryBallance: \" + lastCurrencySecondaryBallance);\n    eventLogger(scriptName + \".currencySecondaryKeepAmountFixedValue: \" + currencySecondaryKeepAmountFixedValue);\n\n    //TODO - currencySecondaryKeepAmountFixedValue - not o.k.!!!!\n    if (lastCurrencySecondaryBallance > 0.001 || currencySecondaryBalance > 0.001) {\n        eventLogger(scriptName + \".STEP1\");\n        makeAsk();\n    }\n\n    eventLogger(scriptName + \".STEP2\");\n    eventLogger(scriptName + \".END\");\n}\n\nfunction cancelAsks() {\n    var scriptName = \"cancelAsks()\";\n    eventLogger(scriptName + \".START\");\n\n    trader.cancelAsks();\n    eventLogger(scriptName + \".END\");\n\n}\n\nfunction resetArrays() {\n    var scriptName = \"resetArrays()\";\n    eventLogger(scriptName + \".START\");\n\n    for (var i = 0; i < 20; i++) {\n        myPrices[i] = \"\";\n        myVolumes[i] = \"\";\n    }\n    eventLogger(scriptName + \".END\");\n\n}\n\nfunction makeAsk() {\n\n    var scriptName = \"makeAsk()\";\n    eventLogger(scriptName + \".START\");\n    var makeSell = false;\n\n    //TODO - make control to hold, when amount bigger then set in bidsDistributionMaxVolumeSecondCurrency or in similiar variable\n    if (currencySecondaryKeepAmountFixedValue > 0) {\n        eventLogger(scriptName + \".STEP 0.1\");\n        lastCurrencySecondaryBallance = parseFloat(trader.fileReadAll(lastCurrencySecondaryBallanceFile));\n        if (lastCurrencySecondaryBallance == 0)\n            lastCurrencyPrimaryBallance = trader.get(\"Balance\", currencySecondary);\n\n        var tempValue = lastCurrencySecondaryBallance - currencySecondaryKeepAmountFixedValue;\n\n        if (tempValue > 0) {\n            eventLogger(scriptName + \".STEP 0.2\");\n            lastCurrencySecondaryBallance = tempValue;\n            makeSell = true;\n        }\n    } else {\n        eventLogger(scriptName + \".STEP 0.3\");\n        lastCurrencySecondaryBallance = lastCurrencySecondaryBallance;\n        makeSell = true;\n    }\n\n    if (makeSell) {\n        var lastPrice = trader.get(\"LastPrice\");\n        var lastBuyPrice = trader.get(\"LastMyBuyPrice\");\n        var buyFee = lastBuyPrice / 1000 * (feeMaker * 1000);\n        var absValue = Math.abs(lastBuyPrice - lastPrice);\n\n        eventLogger(scriptName + \".lastBuyPrice: \" + lastBuyPrice);\n        eventLogger(scriptName + \".buyFee: \" + buyFee);\n        eventLogger(scriptName + \".absValue: \" + absValue);\n        eventLogger(scriptName + \".lastCurrencySecondaryBallance: \" + lastCurrencySecondaryBallance);\n        eventLogger(scriptName + \".profitCurrencyPrimaryAmountCondition: \" + profitCurrencyPrimaryAmountCondition);\n        eventLogger(scriptName + \".profitCurrencyPrimaryAmount: \" + profitCurrencyPrimaryAmount);\n        eventLogger(scriptName + \".feeTaker: \" + feeTaker);\n        eventLogger(scriptName + \".feeMaker: \" + feeMaker);\n\n\n        /////////////////////////////////////////////////////////////////////\n\n        var rightPrice = 0;\n\n        if (absValue < 2) {\n            eventLogger(scriptName + \".absValue < 2\");\n            rightPrice = lastBuyPrice;\n        } else {\n            eventLogger(scriptName + \".absValue >= 2\");\n            rightPrice = lastPrice;\n        }\n        eventLogger(scriptName + \".rightPrice: \" + rightPrice);\n\n        var openAsksCount = trader.get(\"OpenAsksCount\");\n        var minAskValue = 0.001; // 0.01 <=> 1%\n        var maxAskValue = 0.002;\n        var tempValue = (maxAskValue / minAskValue) - 1;\n        var sellValueProfitInPercentage = 0;\n        if (bidsDistributionEnabled == true)\n            sellValueProfitInPercentage = minAskValue + openAsksCount * tempValue / (bidsDistributionMaxNumberOfBids * 1000);\n        else {\n            if (profitCurrencyPrimaryAmountCondition == \"true\") {} else {\n                sellValueProfitInPercentage = profitInPercentage;\n            }\n        }\n\n        eventLogger(scriptName + \".minAskValue: \" + minAskValue);\n        eventLogger(scriptName + \".maxAskValue: \" + maxAskValue);\n        eventLogger(scriptName + \".tempValue: \" + tempValue);\n        eventLogger(scriptName + \".sellValue: \" + sellValueProfitInPercentage);\n\n\n        ///////////////////////////////////            \n        // 0.05 ETH\n        // 0,075 lastBuyPrice\n        var lastCurrencySecondaryBallanceBeforeBuy = lastCurrencySecondaryBallance / ((1 - feeMaker) * 1000) * 1000;\n        eventLogger(scriptName + \".lastCurrencySecondaryBallanceBeforeBuy: \" + lastCurrencySecondaryBallanceBeforeBuy);\n\n        // 0,00375000 BTC            \n        var lastCurrencyPrimaryBallanceBeforeBuy = lastCurrencySecondaryBallanceBeforeBuy * rightPrice\n        eventLogger(scriptName + \".lastCurrencyPrimaryBallanceBeforeBuy: \" + lastCurrencyPrimaryBallanceBeforeBuy);\n\n        // 0,00000375 BTC\n        var primaryBalanceProfitValue = 0;\n        if (profitCurrencyPrimaryAmountCondition == \"true\")\n            primaryBalanceProfitValue = profitCurrencyPrimaryAmount;\n        else\n            primaryBalanceBuyFeeValue = lastCurrencyPrimaryBallanceBeforeBuy * sellValueProfitInPercentage;\n        eventLogger(scriptName + \".primaryBalanceProfitValue: \" + primaryBalanceProfitValue);\n\n        // 0,00000375 BTC\n        var primaryBalanceBuyFeeValue = 0;\n\n\n        primaryBalanceBuyFeeValue = lastCurrencyPrimaryBallanceBeforeBuy * feeMaker;\n        eventLogger(scriptName + \".primaryBalanceBuyFeeValue: \" + primaryBalanceBuyFeeValue);\n\n        // 0,00375375 BTC\n        var currencyPrimaryTargetedBallanceWithNoSellFee = lastCurrencyPrimaryBallanceBeforeBuy + primaryBalanceProfitValue;\n        eventLogger(scriptName + \".currencyPrimaryTargetedBallanceWithNoSellFee: \" + currencyPrimaryTargetedBallanceWithNoSellFee);\n\n        // =(C26/((1-C18)*1000))*1000\n        // 0,00375751 BTC\n        var currencyPrimaryTargetedBallance = currencyPrimaryTargetedBallanceWithNoSellFee / ((1 - feeTaker) * 1000) * 1000;\n        eventLogger(scriptName + \".currencyPrimaryTargetedBallance: \" + currencyPrimaryTargetedBallance);\n\n        // 0,07522538\n        var sellPrice = currencyPrimaryTargetedBallance / lastCurrencySecondaryBallance;\n        eventLogger(scriptName + \".sellPrice: \" + sellPrice);\n\n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////       \n\n        var lastMySellPriceFile = variablePath + \"lastMySellPrice.txt\";\n        trader.fileWrite(lastMySellPriceFile, sellPrice);\n        trader.fileWrite(lastTradeStatusFile, \"BUY\");\n\n        if(raznostInPercentageCondition == \"true\")\n        {            \n            rest = lastBuyPrice + (sellPrice - lastBuyPrice) * resetPrice;\n        }\n\n        var checkNumberOfBids = 0;\n        eventLogger(scriptName + \".allBidsPriceEnabled: \" + allBidsPriceEnabled);\n        eventLogger(scriptName + \".profitInPercentage: \" + profitInPercentage);\n        eventLogger(scriptName + \".lastCurrencySecondaryBallance: \" + lastCurrencySecondaryBallance);\n        if(allBidsPriceEnabled == \"true\" && profitInPercentage > 0 && lastCurrencySecondaryBallance > allBidsPrice)\n        {\n            eventLogger(scriptName + \".DISTRIBUTE SELLS\");\n            eventLogger(scriptName + \".lastCurrencySecondaryBallance: \" + lastCurrencySecondaryBallance);\n            eventLogger(scriptName + \".allBidsPrice: \" + allBidsPrice);\n            checkNumberOfBids = lastCurrencySecondaryBallance / allBidsPrice;\n            eventLogger(scriptName + \".checkNumberOfBids: \" + checkNumberOfBids);\n            checkNumberOfBids = Math.round(checkNumberOfBids);\n            eventLogger(scriptName + \".checkNumberOfBids: \" + checkNumberOfBids);\n            if(checkNumberOfBids > 1)\n            {\n                var sellBuyDifference = sellPrice - lastBuyPrice;\n                var tempValue1 = sellBuyDifference * profitInPercentage * checkNumberOfBids;\n                eventLogger(scriptName + \".tempValue1: \" + tempValue1);\n                var tempValue2 = tempValue1 * (checkNumberOfBids / 10);\n                eventLogger(scriptName + \".tempValue2: \" + tempValue2);\n                sellPrice = lastBuyPrice + tempValue1 + tempValue2;\n                eventLogger(scriptName + \".sellPrice: \" + sellPrice);\n                trader.sell(currencySecondary + currencyPrimary, allBidsPrice, sellPrice);    \n            }\n        }\n        if (checkNumberOfBids <= 1)\n            trader.sell(currencySecondary + currencyPrimary, lastCurrencySecondaryBallance, sellPrice);\n\n        lastCurrencySecondaryBallanceFileWriter(0);\n\n    }\n    //TODO - check variable lastCurrencySecondaryBallanceFile\n\n    eventLogger(scriptName + \".END\");\n}\n\n\nfunction lastCurrencySecondaryBallanceFileWriter(writeValue) {\n    var scriptName = \"lastCurrencySecondaryBallanceFileWriter()\";\n    eventLogger(scriptName + \".START\");\n\n    eventLogger(scriptName + \".writeValue: \" + writeValue);\n    trader.fileWrite(lastCurrencySecondaryBallanceFile, writeValue);\n\n    eventLogger(scriptName + \".END\");\n}\n\n\nfunction restartEverything() {\n\n    var scriptName = \"restartEverything()\";\n    eventLogger(scriptName + \".START\");\n\n    var openBidsCount = trader.get(\"OpenBidsCount\");\n    lastCurrencySecondaryBallance = parseFloat(trader.fileReadAll(lastCurrencySecondaryBallanceFile));\n    eventLogger(scriptName + \".orders: \" + orders);\n    eventLogger(scriptName + \".openBidsCount: \" + openBidsCount);\n    eventLogger(scriptName + \".lastCurrencySecondaryBallance: \" + lastCurrencySecondaryBallance);\n\n    if (openBidsCount != orders) {\n        eventLogger(scriptName + \".STEP1\");\n        var openAsksCount = trader.get(\"OpenAsksCount\");\n        eventLogger(scriptName + \".openAsksCount: \" + openAsksCount);\n        if (openAsksCount < 1) {\n            eventLogger(scriptName + \".STEP2\");\n            var currencySecondaryBalance = trader.get(\"Balance\", currencySecondary);\n            eventLogger(scriptName + \".currencySecondaryBalance: \" + currencySecondaryBalance);\n            if (lastCurrencySecondaryBallance < 0.000001) {\n                eventLogger(scriptName + \".STEP3\");\n                eventLogger(scriptName + \".Restart TraderMainRestart\");\n                trader.groupStop(\"TraderMainRestart\");\n                trader.groupStart(\"TraderMainRestart\");\n            }\n        }\n    }\n    eventLogger(scriptName + \".END\");\n}\n\n/*function sellAfterBuy() {\n    //////////////////////////////\n    fileLogger = \"sellAfterBuy().start\";\n    logger();\n    //////////////////////////////\n    var lastSell = trader.get(\"LastMySellPrice\");\n    for (var count = 0; count < myPrices.length; count++) {\n        if (lastSell == myPrices[count]) {\n            trader.sell(currencySecondary + currencyPrimary, myVolumes[count], myPrices[count] * (1 + (profit / 100) + trader.get(\"Fee\")));\n            trader.on(\"LastMySellPrice\").changed() {\n                orders++;\n                resetArrays();\n                martin++;\n                script2();\n            }\n        }\n    }\n    //////////////////////////////\n    fileLogger = \"sellAfterBuy().stop\";\n    logger();\n    //////////////////////////////\n}*/\n\n/*function aaa() {\n                var scriptName = \"aaa()\";\n                eventLogger(scriptName + \".START\");\n\n    trader.log(\"VAL[END: aaa()]: \");\n    lastCurrencySecondaryBallance = parseFloat(trader.fileReadAll(lastCurrencySecondaryBallanceFile));\n    trader.on(\"OpenBidsCount\").changed() {\n        trader.log(\"VAL[aaa().trader.get(Balance, ETH)]: \", trader.get(\"Balance\", currencySecondary));\n        if (lastCurrencySecondaryBallance > 0.000001) {\n            trader.log(\"VAL[aaa().trader.get(Balance, ETH)]: \", trader.get(\"Balance\", currencySecondary));\n            trader.log(\"VAL[aaa().pperv]: \", pperv);\n            trader.log(\"VAL[aaa().pperv * 0.9999]: \", pperv * 0.9999);\n            if (trader.get(\"Balance\", currencySecondary) < pperv * 0.9999) {\n                trader.log(\"VAL[aaa().trader.get(OpenAsksCount)]: \", trader.get(\"OpenAsksCount\"));\n                if (trader.get(\"OpenAsksCount\") == 1) {\n                    trader.log(\"VAL[aaa()]: \");\n                    if (pperv != 0) {\n                        ppervraz = pperv - trader.get(\"Balance\", currencySecondary);\n                        trader.log(\"VAL[aaa().ppervraz]: \", ppervraz);\n                        // Pvtorvraz = ppervraz * trader.get(\"LastMySellPrice\") \n                    }\n                }\n            }\n        }\n        \n    }\n    trader.log(\"VAL[END: aaa()]: \");\n    //////////////////////////////\n    fileLogger = \"aaa().stop\";\n    logger();\n    //////////////////////////////\n}\n*/\n\n\n\ntrader.on(\"LastMyBuyPrice\").changed() {\n    var scriptName = \"trader.on(LastMyBuyPrice.changed())\";\n    eventLogger(scriptName + \".START\");\n\n    //trader.fileWrite(lastTradeStatusFile, \"BUY\");\n    lastTradeStatus = \"BUY\";\n    eventLogger(scriptName + \".BUY\");\n    trader.fileWrite(lastTradeStatusFile, \"BUY\");\n\n    checkIfAskCanBeMade();\n\n    //eventLogger(scriptName + \".Restart TraderMainRestart\");\n    //trader.cancelBids(currencySecondary + currencyPrimary);\n    //trader.groupStop(\"TraderMainRestart\");\n    //trader.groupStart(\"TraderMainRestart\");\n\n    eventLogger(scriptName + \".END\");\n}\n\ntrader.on(\"LastMySellPrice\").changed() {\n    var scriptName = \"trader.on(LastMySellPrice.changed())\";\n    eventLogger(scriptName + \".START\");\n\n    trader.fileWrite(lastTradeStatusFile, \"SELL\");\n    lastTradeStatus = \"SELL\";\n    eventLogger(scriptName + \".SELL\");\n\n    eventLogger(scriptName + \".END\");\n}"
