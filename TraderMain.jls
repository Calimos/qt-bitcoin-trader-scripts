[JLScript]
Data="var variablePath = \"/home/odroid/Desktop/QTBitcointTrader/\";\n///////////////////////////////////////////////////////////////////\n// in%,the first step indentation How price first buy order in the table should be less than the purchase of the current at the time of the calculation table.  All other orders will buy more cheaper //default 0.5\nvar otstupFile = variablePath + \"FirstBuy.txt\";\nvar otstup = parseFloat(trader.fileReadAll(otstupFile));\n///////////////////////////////////////////////////////////////////\n//NumberOfOrders.txt\nvar ordersFile = variablePath + \"NumberOfOrders.txt\";\nvar orders = parseFloat(trader.fileReadAll(ordersFile)); // 2 to 20,how many buy-to place orders in the amount of overlap. //default 13\n///////////////////////////////////////////////////////////////////\n//StepBetweenOrders.txt\nvar perekrFile = variablePath + \"StepBetweenOrders.txt\";\nvar perekr = parseFloat(trader.fileReadAll(perekrFile)); // in% overlap stroke rates,calculating the depth of the table buy orders.  For example,in a first step,the price 10ETH percentage of overlap of 20% means that the table will be set in the range // 8-10ETH.  //default 30\n///////////////////////////////////////////////////////////////////\n//Profit.txt\nvar profitFile = variablePath + \"Profit.txt\";\nvar profit = parseFloat(trader.fileReadAll(profitFile)); // in%,profit,profit How to lay into each sell order. \n///////////////////////////////////////////////////////////////////\n//Margin.txt\nvar martinFile = variablePath + \"Martin.txt\";\nvar martin = parseFloat(trader.fileReadAll(martinFile)); // in%,martingale,when calculating each table buy orders following order cheaper by volume greater than the previous to this value.  //default 15\n///////////////////////////////////////////////////////////////////\n\nvar lastSaleFile = variablePath + \"lastSale.txt\";\ntrader.fileWrite(lastSaleFile,0);\nvar lastSale = parseFloat(trader.fileReadAll(lastSaleFile)); // in%,martingale,when calculating each table buy orders following order cheaper by volume greater than the previous to this value.  //default 15\n///////////////////////////////////////////////////////////////////\n\nvar lastETHbalanceFile = variablePath + \"lastETHbalance.txt\";\ntrader.fileWrite(lastETHbalanceFile,0);\nvar lastETHbalance = parseFloat(trader.fileReadAll(lastETHbalanceFile));\n///////////////////////////////////////////////////////////////////\n\nvar bidPriceFile = variablePath + \"bidPrice.txt\";\nvar bidPrice = trader.get(\"BidPrice\");\ntrader.fileWrite(bidPriceFile,bidPrice);\n///////////////////////////////////////////////////////////////////\n\nvar perekrDif = 0.25;\nvar martinDif = 0.1;\n\nvar numberOfBids = 0;\nvar numberOfAsks = trader.get(\"OpenAsksCount\");\nvar numberOfAsksOld = numberOfAsks;\n\nlastSale = trader.get(\"LastMySellPrice\");\ntrader.fileWrite(lastSaleFile,lastSale);\n\ntrader.groupStop(\"TraderValues\");\ntrader.groupStart(\"TraderValues\");\ntrader.groupStop(\"Trader\");\ntrader.groupStart(\"Trader\");\n\n\ntrader.timer(23, \"restartEverything()\");\n\nfunction restartEverything() {\n\t\n\ttrader.log(\"VAL[START: restartEverything()]: \");\n\n\tbidPrice = trader.get(\"BidPrice\");\n\ttrader.fileWrite(bidPriceFile,bidPrice);\n\n\ttrader.fileWrite(lastETHbalanceFile,trader.get(\"Balance\",\"ETH\"));\n\tnumberOfBids = trader.get(\"OpenBidsCount\");\n\ttrader.log(\"VAL[restartEverything().numberOfBids]: \", numberOfBids);\n\ttrader.log(\"VAL[restartEverything().orders]: \", orders);\n\t//check, if new bids have been offered\n\t//if(numberOfAsks != numberOfAsksOld)\n\t//{\n\t\ttrader.log(\"VAL[restartEverything.KORAK 0\");\n\t\t//sale has been made\n\t\t//prodaja se je zgodila nekje vmes\n\t\tif((((numberOfAsks < numberOfAsksOld) || (numberOfAsks == numberOfAsksOld  && lastSale != 0)) &&lastSale != trader.get(\"LastMySellPrice\")) || trader.get(\"OpenBidsCount\") == 0)\n\t\t{\n\t\t\ttrader.log(\"VAL[restartEverything.KORAK 1\");\n\t\t\ttrader.log(\"VAL[restartEverything.numberOfBids]: \", numberOfBids);\n\t\t\t//numberOfBids++;\n\t\t\ttrader.log(\"VAL[restartEverything.IncreaseNumberOfBids()]: \");\n\t\t\ttrader.log(\"VAL[restartEverything.IncreaseNumberOfBids()]: \", numberOfBids);\n\t\t\t//trader.fileWrite(ordersFile,numberOfBids);\n\t\t\t\n\t\t\ttrader.log(\"VAL[restartEverything.perekr]: \", perekr);\n\t\t\t//perekr += perekrDif;\n\t\t\ttrader.fileWrite(perekrFile,perekr);\n\t\t\t\n\t\t\ttrader.log(\"VAL[restartEverything.martin]: \", martin);\n\t\t\t//martin += martinDif;\n\t\t\ttrader.fileWrite(martinFile,martin);\n\t\t\t\n\t\t\ttrader.log(\"VAL[restartEverything.otstup]: \", otstup);\n\t\t\totstup = 0;\n\t\t\ttrader.fileWrite(otstupFile,otstup);\n\t\t\t\n\t\t\tlastSale = trader.get(\"LastMySellPrice\");\n\t\t\ttrader.fileWrite(lastSaleFile,lastSale);\n\t\t\t\n\t\t\ttrader.groupStop(\"TraderMainRestart\");\n\t\t\ttrader.groupStart(\"TraderMainRestart\");\n\t\t}\n\t//}\t\n\t\n\t\n\tif(numberOfBids != orders && ((orders - numberOfBids) > 1))\n\t{\n\t\ttrader.log(\"VAL[restartEverything.KORAK 2\");\n\t\ttrader.log(\"VAL[restartEverything.changeNumberOfBids()]: \");\n\t\t//trader.fileWrite(ordersFile,numberOfBids);\n\t\t\n\t\ttrader.log(\"VAL[restartEverything.perekr]: \", perekr);\n\t\t//perekr -= perekrDif;\n\t\ttrader.fileWrite(perekrFile,perekr);\n\t\t\t\n\t\ttrader.log(\"VAL[restartEverything.martin]: \", martin);\n\t\t//martin -= martinDif;\n\t\ttrader.fileWrite(martinFile,martin);\n\t\t\n\t\t//trader.groupStop(\"Trader\");\n\t\t//trader.groupStart(\"Trader\");\n\t\torders = numberOfBids;\n\t}\n\t\n\torders = numberOfBids;\n\tnumberOfAsksOld = numberOfAsks;\n\ttrader.log(\"VAL[END: restartEverything()]: \");\n}"
Encrypted=false
LogRowsCount=200
Name=TraderMain
Notes=
Version=1
